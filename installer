#!/bin/bash

INSTALL_TARGET="/opt/dashpi"
USER_HOME=`pwd -P ~$USER`


# Bash colors
TEXT_RESET="\e[0m"
TEXT_BOLD="\e[1m"
TEXT_GREEN="\e[32m"
TEXT_YELLOW="\e[33m"


# print_step(steps, message)
function print_step() {
	echo ""
	echo -e "${TEXT_BOLD}${TEXT_GREEN}Step ${TEXT_YELLOW}$1 of 11${TEXT_GREEN} :: ${TEXT_YELLOW}$2"
	echo -e "${TEXT_GREEN}********************************************************************************"
	echo -e "${TEXT_RESET}"
}


# Ensure the disk has been expanded
TOTALDISK=$(df -P . | tail -1 | awk '{print $2}')
if [ $TOTALDISK -lt 2097152 ]; then
    echo "Warning: Total disk space is under 2GB - have you expanded your filesystem?"
    exit 1
fi


# Stop DashPi if it's running
print_step 1 "Stopping DashPi services (if running)"
sudo service dashpi stop ||:


# Enable Aptitude fancy reporting
print_step 2 "Updating system packages"
echo 'Dpkg::Progress-Fancy "1";' | sudo tee /etc/apt/apt.conf.d/99dashpi

# Updating system packages
sudo apt-get -y update
sudo apt-get -y upgrade


# Installing required dependencies
print_step 3 "Installing system dependencies"
sudo apt-get -y install \
  policykit-1 rpi-update unzip upstart \
  git-core python-pip \
  openbox x11-xserver-utils lightdm unclutter \
  iceweasel \
  fonts-dejavu fonts-sil-gentium-basic ttf-mscorefonts-installer

# Optional flash support: gnash gnash-common browser-plugin-gnash lightspark browser-plugin-lightspark


# Downloading the latest stable version of DashPi
print_step 4 "Downloading latest stable release of DashPi"
sudo rm -rf "$INSTALL_TARGET"
sudo mkdir -p "$INSTALL_TARGET"

cd "$INSTALL_TARGET"

sudo git clone https://github.com/andrewvaughan/dash-pi "$INSTALL_TARGET"
sudo git fetch --tags
STABLE_TAG=$(sudo git describe --tags `sudo git rev-list --tags --max-count=1`)
sudo git checkout $STABLE_TAG


# Installing DashPi dependencies
print_step 5 "Installing DashPi dependencies"
sudo pip install -U -r requirements.txt


# Setting up DashPi service to start on startup by default
print_step 6 "Installing service and startup scripts"
cat <<EOT | sudo tee /etc/init/dashpi.conf
# dashpi - The DashPi dashboard service

description "The DashPi dashboard servce"
author "Andrew Vaughan - https://andrewvaughan.io"

setuid $USER
setgid $USER

script
  exec python /opt/dashpi/dashpi -q
end script
EOT


# Bootstrapping the configuration file
print_step 7 "Creatng base configuration file at '~/.dashpi.yml'"
if [ ! -f "$USER_HOME/.dashpi.yml" ]; then
    sudo cp "$INSTALL_TARGET/config-example.yml" "$USER_HOME/.dashpi.yml"
else
    echo "Configuration file exists...skipping"
fi


# Set the RaspberryPi configuration to not turn displays off
print_step 8 "Configuring RaspberryPi display settings"
sudo mkdir -p "$USER_HOME/.config/openbox"
cat <<EOT | sudo tee "$USER_HOME/.config/openbox/autostart"
unclutter -idle 0.1 -root > /tmp/autostart.log 2>&1
xset s noblank >> /tmp/autostart.log 2>&1
xset s off >> /tmp/autostart.log 2>&1
xset -dpms >> /tmp/autostart.log 2>&1
sudo start dashpi >> /tmp/autostart.log 2>&1
EOT


# Set the RaspberryPi to automatically login as the main user
print_step 9 "Configuring auto-login into desktop"
sudo systemctl set-default graphical.target

cat <<EOT | sudo tee "/etc/lightdm/lightdm.conf"
[LightDM]

[SeatDefaults]
autologin-user=$USER
autologin-user-timeout=0

[XDMCPServer]
[VNCServer]
EOT


# Setup iceweasel for selenium usage and kiosk mode
print_step 10 "Configuring browser for kiosk mode"

# Create the user prefs file (and kill any iceweasel instances)
iceweasel > /dev/null 2>&1
sudo killall iceweasel
sudo killall firefox

function set_ff_pref() {
	cd "$USER_HOME/.mozilla/firefox"
	cd *.default

	sed -i.bak "/$1/d" prefs.js
	echo "user_pref(\"$1\", $2);" | tee -a prefs.js
}

# Set the starting page
set_ff_pref "browser.startup.homepage" "\"file://$INSTALL_TARGET/splash/index.html\""
set_ff_pref "browser.sessionstore.resume_from_crash" "false"

# Prevent dialogs and popups
set_ff_pref "capability.policy.default.Window.open" "\"noAccess\""
set_ff_pref "capability.policy.default.Window.alert" "\"noAccess\""
set_ff_pref "capability.policy.default.Window.confirm" "\"noAccess\""
set_ff_pref "capability.policy.default.Window.prompt" "\"noAccess\""


# Cleanup
print_step 11 "Cleaning up"
sudo chown -R $USER:$USER "$INSTALL_TARGET"
sudo chown -R $USER:$USER "$USER_HOME"
sudo rm -rf /tmp/*


# Restart
print_step 12 "Restarting..."
DURATION=$SECONDS
echo "Installation time: $(($DURATION / 60)) minutes and $(($DURATION % 60)) seconds."
sudo shutdown -r now
